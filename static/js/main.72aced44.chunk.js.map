{"version":3,"sources":["components/Display_Component/Display.js","App.js","index.js","components/Keypad_Component/Keypad.js"],"names":["Display","props","id","formula","display","App","state","handleState","bind","for_formula","for_display","this","setState","Keypad","Component","ReactDOM","render","StrictMode","document","getElementById","del","operators","numbers","decimal","equal","handleDelete","handleOperator","handleNumber","handleDecimal","handleEqual","slice","operator","toString","operator_signs","Object","values","operator_value","includes","some","endsWith","test","length","number","displayed_formula","Number","number_value","isNaN","formula_numbers","split","answer","eval","error_flash","setTimeout","del_button","className","onClick","operator_buttons","keys","map","number_buttons","decimal_button","equal_button","buttons_layout"],"mappings":"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","file":"static/js/main.72aced44.chunk.js","sourcesContent":["import React from 'react';\nimport './display.scss';\n\nfunction Display(props) {\n    return (\n        <div id=\"screen-container\">\n            <div id=\"formula\">{props.formula}</div>\n            <div id=\"display\">{props.display}</div>\n        </div>\n    );\n}\n\nexport default Display;\n","import React, { Component } from 'react';\nimport Display from './components/Display_Component/Display';\nimport Keypad from './components/Keypad_Component/Keypad';\nimport './scss/App.scss';\n\nexport class App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formula: '',\n            display: 0\n        };\n\n        this.handleState = this.handleState.bind(this);\n    }\n\n    handleState(for_formula, for_display) {\n        this.setState({\n            formula: for_formula,\n            display: for_display\n        });\n    }\n\n    render() {\n        const {formula, display} = this.state;\n        return (\n            <div id=\"app\">\n                <div id=\"app__calculator\">\n                    <Display formula={formula} display={display}  />\n                    <Keypad formula={formula} display={display} handleState={this.handleState} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { Component } from 'react';\nimport './scss/keypad.scss';\n\nclass Keypad extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            del: 'AC',\n            operators: {\n                'add': '+',\n                'subtract': '-',\n                'multiply': '*',\n                'divide': '/'\n            },\n            numbers: {\n                'one': 1,\n                'two': 2,\n                'three': 3,\n                'four': 4,\n                'five': 5,\n                'six': 6,\n                'seven': 7,\n                'eight': 8,\n                'nine': 9,\n                'zero': 0\n            },\n            decimal: '.',\n            equal: '='\n        };\n\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleOperator = this.handleOperator.bind(this);\n        this.handleNumber = this.handleNumber.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.handleEqual = this.handleEqual.bind(this);\n    }\n\n    // util method: for laying out the buttons\n    buttons_layout(del, operators, numbers, decimal, equal) {\n        // layout: [delete, +, -, 1, 2, 3, *, 4, 5, 6, /, 7, 8, 9, =, 0, .]\n        return [\n            del, operators[0], operators[1],\n            numbers.slice(0, 3), operators[2],\n            numbers.slice(3, 6), operators[3],\n            numbers.slice(6, 9), equal,\n            numbers[9], decimal\n        ]\n    }\n\n    // props: formula, display, handleState\n    \n    handleDelete() {\n        // set the parent states to default (formula is empty, display is zero)\n        const for_formula = '';\n        const for_display = 0;\n        this.props.handleState(for_formula, for_display)\n    }\n\n    handleOperator(operator) {\n        // NOTE: operator argument is the description string, not the symbol.\n        // Also, due to decison tree, I end up writing nested if-else, (I'll just refactor later)\n\n        const formula = this.props.formula.toString();\n        const operator_signs = Object.values(this.state.operators);\n        const operator_value = this.state.operators[operator];\n\n        // check1: if formula state from parent only consists of operator, just change it upon new operator press\n        if (operator_signs.includes(formula)) {\n            const for_formula = operator_value;\n            const for_display = operator_value;\n            this.props.handleState(for_formula, for_display);\n        } else if (operator_signs.some(operator => formula.endsWith(operator))) {\n            // check2: formula ends with operator\n            // follow up: next operator is a 'negative sign (-)' and still valid to add?\n            \n            const valid_to_append = str => /(\\d[+*/-])$/.test(str);\n            \n            if (operator_value === '-' && valid_to_append(formula)) {\n                // operator is for negative sign & it's ok to add it on formula\n                const for_formula = `${formula}${operator_value}`;\n                const for_display = operator_value;\n                this.props.handleState(for_formula, for_display);\n            } else {\n                // just replace the latest operator\n                const for_formula = formula.slice(0, formula.length-1) + operator_value;\n                const for_display = operator_value;\n                this.props.handleState(for_formula, for_display);\n            }\n        } else if (formula.includes('=')) {\n            // check3: formula is from a successful calculation (user just hit equal)\n            const for_formula = this.props.display.toString() + operator_value; // we're taking the latest answer for next calculation\n            const for_display = 0;\n            this.props.handleState(for_formula, for_display);\n        } else {\n            // if all conditions above failed, it's just the regular use of operator\n            const for_formula = `${formula}${operator_value}`;\n            const for_display = operator_value;\n            this.props.handleState(for_formula, for_display);\n        }\n    }\n\n    handleNumber(number) {\n        // Note: number argument is the number word, not the exact number\n\n        const formula = this.props.formula.toString();\n        const display = Number(this.props.display);\n        const number_value = this.state.numbers[number];\n        const display_digit_limit = 22 // <<<<<<<< CHANGE THIS LATER BASED ON SCREEN SIZE\n\n        // check1: entering number after performing calculation (equal is just pressed)\n        if (formula.includes('=')) {\n            // comes from a calculation? overwrite:\n            const for_formula = '';\n            const for_display = number_value;\n            this.props.handleState(for_formula, for_display);\n        } else if (display.toString().length <= display_digit_limit) {\n            // check2: display length <= limit (limit depends on screen size)\n            // follow up: check if display is a string (operator) or num\n            if (isNaN(display)) {\n                // display is currently showing an operator:\n                const for_formula = formula + number_value;\n                const for_display = number_value;\n                this.props.handleState(for_formula, for_display);\n            } else {\n                const is_decimal = num => num.toString().includes('.');\n                const endswith_operator = displayed_formula => {\n                    return Object.values(this.state.operators).some(operator => displayed_formula.toString().endsWith(operator))\n                };\n\n                const for_formula = `${formula}${number_value}`;\n                const for_display = endswith_operator(formula) ? number_value : is_decimal(this.props.display) ? `${display}${number_value}` : (display * 10) + number_value;\n                this.props.handleState(for_formula, for_display);\n            }\n        }\n\n    }\n\n    handleDecimal() {\n        // make sure no repeated decimal in a number\n        // in case formula is empty, use 0 then .\n        const formula = this.props.formula;\n        const display = this.props.display;\n\n        if (formula.length === 0) {\n            const for_formula = '0.';\n            const for_display = '0.';\n            this.props.handleState(for_formula, for_display);\n        } else {\n            // check for repetition:\n            const formula_numbers = formula.split(/[*/]/);\n            const dont_have_decimal = num =>  ! num.includes('.');\n            if (dont_have_decimal(formula_numbers[formula_numbers.length-1])) {\n                const for_formula = `${formula}.`;\n                const for_display = `${display}.`;\n                this.props.handleState(for_formula, for_display);\n            }\n        }\n    }\n\n    handleEqual() {\n        // take the formula and execute it\n        try {\n            const formula = this.props.formula;\n            const answer = eval(formula);\n            const for_formula = `${formula}=${answer}`\n            const for_display = answer;\n            this.props.handleState(for_formula, for_display);\n        } catch {\n            const for_formula = '';\n            const error_flash = 'Math Error';\n            this.props.handleState(for_formula, error_flash);\n            const for_display = 0;\n            setTimeout(() => this.props.handleState(for_formula, for_display), 1000);\n        }\n    }\n\n    render() {\n        // take state values\n        const {del, operators, numbers, decimal, equal} = this.state;\n\n        // generate buttons\n        const del_button = <button id=\"clear\" className=\"button\" onClick={this.handleDelete} key=\"del\">{del}</button>;\n        const operator_buttons = Object.keys(operators).map(operator => {\n            return <button id={operator} className=\"operator button\" onClick={() => this.handleOperator(operator)} key={operator}>{operators[operator]}</button>\n        });\n        const number_buttons = Object.keys(numbers).map(number => {\n            return <button id={number} className=\"number button\" onClick={() => this.handleNumber(number)} key={number}>{numbers[number]}</button>\n        });\n        const decimal_button = <button id=\"decimal\" className=\"button\" onClick={this.handleDecimal} key=\"decimal\">{decimal}</button>;\n        const equal_button = <button id=\"equal\" className=\"button\" onClick={this.handleEqual} key=\"equal\">{equal}</button>\n\n        return (\n            <div id=\"calc_keypad\">\n                {this.buttons_layout(del_button, operator_buttons, number_buttons, decimal_button, equal_button)}\n            </div>\n        );\n    }\n}\n\nexport default Keypad;\n"],"sourceRoot":""}